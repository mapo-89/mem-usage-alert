[[ "${BASH_SOURCE[0]}" == "${0}" ]] && { echo "‚ùå Dieses Skript ist als Bibliothek gedacht und nicht direkt ausf√ºhrbar."; exit 1; };

# utils/validators.sh - Validatoren f√ºr Skripte

# === üîç IP-Adresse validieren (IPv4, optional mit /CIDR) ===
validate_ip() {
  local ip="$1"

  # √úberpr√ºfen, ob die IP-Adresse entweder im Format "IP-Adresse" oder "IP-Adresse/Prefix" vorliegt
  if [[ ! "$ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$ ]]; then
    log_error "Ung√ºltiges IP-Adressformat: $ip"
    return 1
  fi
 
  # Extrahieren der IP-Adresse und des optionalen Prefixes
  local ip_address
  local prefix
  # Zerlegen in IP und Prefix (wenn vorhanden)
  if [[ "$ip" == */* ]]; then
    ip_address=$(echo "$ip" | cut -d'/' -f1)
    prefix=$(echo "$ip" | cut -d'/' -f2)
  else
    ip_address="$ip"
    prefix=""
  fi

  # √úberpr√ºfen, ob die IP-Adresse im g√ºltigen Bereich ist (0-255 f√ºr jedes Oktett)
  IFS='.' read -r -a ip_array <<< "$ip_address"
  for octet in "${ip_array[@]}"; do
    if [[ "$octet" -lt 0 || "$octet" -gt 255 ]]; then
      log_error "Ung√ºltige IP-Adresse: $ip_address"
      return 1
    fi
  done

  # Wenn ein Prefix angegeben ist, √ºberpr√ºfen, ob dieser im g√ºltigen Bereich (0-32) liegt
  if [[ -n "$prefix" && ("$prefix" -lt 0 || "$prefix" -gt 32) ]]; then
    log_error "Ung√ºltiger Prefix: /$prefix"
    return 1
  fi

  log_success "G√ºltige IP-Adresse: $ip"
  return 0
}

# === üåê Domain validieren ===
validate_domain() {
  local domain="$1"

  if [[ "$domain" =~ ^([a-zA-Z0-9][-a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$ ]]; then
    log_success "G√ºltige Domain: $domain"
    return 0
  else
    log_error "Ung√ºltige Domain: $domain"
    return 1
  fi
}

# === üî¢ Port validieren (1‚Äì65535) ===
validate_port() {
  local port="$1"

  if [[ "$port" =~ ^[0-9]+$ ]] && [[ "$port" -ge 1 && "$port" -le 65535 ]]; then
    log_success "G√ºltiger Port: $port"
    return 0
  else
    log_error "Ung√ºltiger Port: $port"
    return 1
  fi
}

# === üìÅ Verzeichnis pr√ºfen ===
validate_directory() {
  local dir="$1"

  if [[ -d "$dir" ]]; then
    log_success "Verzeichnis existiert: $dir"
    return 0
  else
    log_error "Verzeichnis nicht gefunden: $dir"
    return 1
  fi
}

# === üìù Datei pr√ºfen ===
validate_file() {
  local file="$1"

  if [[ -f "$file" ]]; then
    log_success "Datei existiert: $file"
    return 0
  else
    log_error "Datei nicht gefunden: $file"
    return 1
  fi
}